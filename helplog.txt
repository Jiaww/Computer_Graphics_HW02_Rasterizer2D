1. Couldn't understand the meaning of Trianglate()
Solved.
Trianglate() is to populate the vertexs of the polygon to triangles which can be draw.

2.Couldn't find where is the Bounding Box function or Class.
Solved.
Create a Class by myself and implement a function which is to compute the bounding of the triangle.

3.Didn't know how to use the Qimage or how to show the picture on the screen.
Solved.
setPixel() function.

4. Extra Credit:
5.1:
 the answer is the CustonScene.json which I made by myself.
5.2:
 Didn't do it.
5.3:
 When the program is running, you can find a text called "RenderLine" and click it you are going to load some .json file and then it will give you the edges of the polygons(Triangles).

5.4:
 1. The first version of this function was finished at 1:20AM 9/20/2016:
	The functions are IsConvex(Vertex &Vnum) and ConcaveToConvex().
	The principle of this version is to find the concave point Vn, and then split the Vn Vn+1 Vn+2 Triangle from the polygon and retest the splited polygon until there is no concave point.
	But this version had some serious problems, which it can't solved the conditions that there are more than one concave points near each other.
 2. The second version is a perfect version, but I am still working on it(Now it's 2:26AM 9/20/2016).
	The principle of the second version as follow:
	a. Assume that the polygon has 6 vertexes.
	b. We test each points to find out whether it is a concave point by using cross product.
	c. If we find the concave point is P2, then we could compute the vertex Pn which the vector P1P2 crosses with another edges of the polygon.
	d. Assume P1P2 is crossed with P4P5, we can find out the fact that the Pn is on P4P5.
	e. Then we split the polygon into 2 parts, one part is P0P1P2PnP5P0, the other part is P2P3P4Pn
	f. Repeat step b for each polygon until there is no concave point in each polygon.
	g. Trianglate for each polygon and then we could get the final answer.